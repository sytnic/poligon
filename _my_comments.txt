
    Команда устанавливает в текущую папку последнюю версию laravel
      Должен быть установлен composer
composer create-project --prefer-dist laravel/laravel
	
    Устанавливает в папку blog версию 5.7
        В текущую папку версию 5.7 не устанавливает, нужно указать папку
composer create-project --prefer-dist laravel/laravel blog "5.7.*"

    Разрешения для папок
sudo chmod 777 -R storage && sudo chmod 777 -R bootstrap/cache

    Vagrant и VirtualBox жестко привязывают права к общей с Windows папке и ее вложенностям. 
Поменять права вряд ли удастся.

    При ошибке установки barryvdh/laravel-debugbar на Laravel 5.7.29 командой
composer require barryvdh/laravel-debugbar --dev    
     встала версия 3,0 
composer require barryvdh/laravel-debugbar:~3.0 --dev

---
    Обязательно должен быть файл .env. Отключается в gitignore. Настройки соединения с БД и др.

    Debugbar включается/отключается в файле .env
APP_DEBUG=true
    или
APP_DEBUG=false

    Возможно еще нужен  barryvdh/laravel-ide-helper
    Бокс под Laravel -  vagrant box add laravel/homestead

--------------------
3.
---
    Для MySQL/MariaDB нужно будет прописать следующие строки в app\Providers\AppServiceProvider.php,
    описание здесь: 
    Index Lengths & MySQL / MariaDB
    https://laravel.com/docs/5.7/migrations#indexes :

...
  use Illuminate\Support\Facades\Schema;
...
  public function boot()
{
    Schema::defaultStringLength(191);
}
---

    Версия Laravel
php artisan -V

--------------------
5.
    Создание пустой схемы (базы данных) `poligon` в Workbench.
CREATE SCHEMA `poligon` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

    Создание моделей в папке app/Models c соответсвующими им миграциями
php artisan make:model Models/BlogCategory -m
    т.е. автоматически создастся Модель, папка Models и 
    миграция в database/migrations/ (создающая структуру таблицы),
    которую можно внутри донастроить вручную.

php artisan make:model Models/BlogPost -m

    Создание БД и таблиц из моделей
    Вручную подготавливаются файлы миграции (для таблиц) в database/migration/ , далее команда:
php artisan migrate

--------------------
6. 
    Заполнение базы данных тестовыми данными: 
    с помощью сидов (seed) и фабрик
  
    Создание сидов
php artisan make:seeder UsersTableSeeder  // это имя класса, оно же будет именем файла в database/seeds
php artisan make:seeder BlogCategoriesTableSeeder
                        // посты (не категории) будут созданы с помощью фабрики

    Сиды создаются пустыми и заполняются вручную. Фабрики создаются вручную.

    Запуск сидов и фабрик
php artisan db:seed
    Запускает database\seeds\DatabaseSeeder::run(),
    в котором должны быть прописаны "ссылки" на все сидеры и фабрики,
    при этом файлы (классы) сидеров и фабрик в папке database\ должны быть заполнены.
	
    Запускает конкретный сид.
php artisan db:seed --class=UsersTableSeeder
php artisan db:seed --class=BlogCategoriesTableSeeder
    
    Откатывает базу данных к нулю, создаёт таблицы и заполняет заново всеми сидами.
php artisan migrate:refresh --seed
    

    Для изменения структуры базы данных (напр., связи айдишников и тайтлов) понадобится
php artisan migrate:refresh --seed ,
    а не php artisan db:seed --class=BlogCategoriesTableSeeder   

    Помощь по встроенным функциям Laravel (хелперы)
https://laravel.com/docs/8.x/helpers
\vendor\laravel\framework\src\Illuminate\Support\helpers.php
\vendor\laravel\framework\src\Illuminate\Foundation\helpers.php
    

--------------------
8.

    Создание контроллера, с пустыми рест-функциями благодаря --resource (контроллер ресурсов)
php artisan make:controller RestTestController --resource 

    В роутах routes/web.php вручную создаются маршруты для этого контроллера
    
    Список всех существующих маршрутов
php artisan route:list
    (в фигурных скобках в столбце URI обозначается место для id-ишника)

    Создать список маршрутов в отдельном файле в текущей папке
php artisan route:list > routes.txt

--------------------
9. Контроллеры приложения

    Базовый (родительский) контроллер блога (на всякий случай)   
    "Blog/" создаст подпапку Blog в app/Http/Controllers
php artisan make:controller Blog/BaseController
     Для "родительности" в нём допишем abstract
    и в других контроллерах в Blog/ перепеписываем по умолчанию extends Controller
    на extends BaseController

    Контроллер статей блога
php artisan make:controller Blog/PostController --resource

--------------------
11. Аутентификация 
    
    https://laravel.com/docs/5.7/authentication

    Создание базовых файлов
php artisan make:auth

    Запуск миграции
php artisan migrate

    Проверка
http://poligon.local/register


    Как подключается контент в blade-файлах

    Комментарии <!-- --> в  blade-файлах сломают приложение
    {{-- правильный комментарий в blade-файлах --}}

    В \resources\views\layouts\app.blade.php   
    в тегах контента 
        <main class="py-4">
            @yield('content')
        </main>
    будет подключаться будущий контент, он
    в других blade-файлах подключается так
            @extends('layouts.app')
            @section('content')
                <div> ... </div>
            @endsection            

    функции 
    @foreach ... @endforeach 
    @if ... @endif
    являются blade-функциями

    такая строчка
        @php /** @var \App\Models\BlogCategory $item */ @endphp
    создаётся для phpstorm, чтобы $item стала кликабельной
    и вела к ее определению в проекте.



 --------------------
12.

    Создание контроллера,
    будет создана подпапка Admin/ в ней контроллер
php artisan make:controller Blog/Admin/CategoryController --resource

    Создание маршрутов вручную в файле в web.php
Route::resource('categories', 'CategoryController')
  ->only($methods)
  ->names('blog.admin.categories');

---------------------
14. 

    Заполняются (вручную) пустые методы в CategoryController,
    файлы view и папки под них содаются вручную в resources/views/ .
    Согласно маршрутам вот такой вызов /admin/blog/categories/ .

---------------------
22. Валидация

    Создание своего класса запросов, расширяющих FormRequest:
php artisan make:request BlogCategoryObjectRequest
    попадает в app/Http/Requests, к-рая будет создана

---------------------
23. 

php artisan make:request BlogCategoryCreateRequest

Повторяемую логику в методах Контроллеров можно вынести в Обсервер.

---------------------
26. Создание репозитория (хранилища) для категорий

    Создаётся вручную папка app/Repositories .
    В ней два файла. Один из них - ядро. От него наследуются другие в этой папке:   
    CoreRepository.php, BlogcategoryRepository.php .

    Можно попробовать сделать командами, но велика вероятность ошибок,
    т.к. "Репозиторий не является частью фреймворка (как контроллеры или модели)" .
composer require jason-guru/laravel-make-repository --dev
php artisan make:repository BlogcategoryRepository

---------------------
32. Управление статьями блога, подготовка

    Будет выводится по url: /admin/blog/posts

    Создаётся контроллер для управления статьями блога,
    -r означает "с ресурсными методами" (как --resource),
    правильно писать с прямым слэшем (Linux, Vagrant), иначе 
    создаст в общей папке контроллеров и соединит всю запись в имя файла

php artisan make:controller Blog/Admin/PostController -r

    Для этого контроллера создаются вручную:

    репозиторий - app\Repositories\BlogPostRepository.php
    view - resources\views\blog\admin\posts\index.blade.php
    роуты - routes\web.php

    Должны быть правильно прописаны все use, чтобы не было ошибок

---------------------
34. Отношения Eloquent: Relationships

    Может выводить на экран данные из разных таблиц, связанных отношениями.

    - в модель BlogPost добавляем отношения
    - в репозиторий добавляем with(), чтобы выбирать нужные столбцы из нужных таблиц
    - во вью раньше выводили поля _id из одной таблицы, теперь выводим
         c помощью отношений нужные значения из реляционно связанных таблиц 

---------------------

Далее идёт переезд с версии Laravel 5.7 на 5.8

Основные работающие ссылки:
/admin/blog/posts
/admin/blog/categories

Все работающие url'ы можно посмотреть командой, набрав в терминале в папке проекта:
php artisan route:list

---------------------








